<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[设计模式学习]]></title>
      <url>%2F2017%2F03%2F14%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[OO基础 抽象 封装 多态 继承 OO原则 封装变化的 多用组合，少用继承 针对接口编程，不针对实现编程 OO模式模式是历经验证的OO设计经验 策略模式 策略模式定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。 观察者模式 观察者模式定义了对象之间的一对多依赖，当一个对象(主题)改变状态时，它的所有依赖者(观察者)都会收到通知并自动更新。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[python编码详解]]></title>
      <url>%2F2017%2F02%2F27%2Fpython%E7%BC%96%E7%A0%81%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[概念编码（Encode） 用预先规定的方法将文字、数字或其它对象编成数码，或将信息、数据转换成规定的电脉冲信号。也就是将文字等信息以二进制数据存储到计算机中。与之相对应的就是解码（Decode）。 问题由来在计算机中，经常会遇到乱码，莫名其妙就是一堆看不懂的东西。现在我主要要两个地方经常遇到乱码，一个是网站网页中，经常写的网页中文就是乱码，这个还好解决一点。第二个就是在python编程中，经常会遇到莫名错误提示，代表性的：&lt; UnicodeDecodeError:’ascii’ codec can’t decode byte 0xe5 in position 0有时候搞半天不知道哪儿出错了，就卡在那儿不知所措。要想解决这些问题，我们就必须把计算机中编码解码问题搞清楚。 编码历史#ASCII1946年2月14日第一台计算机在每个宾夕法尼亚大学诞生，为了在计算机中表示英语，美国人就制定了一套标准，这就是ASCII。它用一个字节来表示英文中所有字符和一些常用字符(键盘上每一个键位)，一个字节（8位）可以表示256个字符，表示英文中那几个字符绰绰有余。并且刚开始只用了7位，最高位保留为0。后来计算机普及到西欧地区时才将最高位用到，制定了EASCII（Extesible ASCII）标准。 #GB2312和GBK20世纪八十年代左右，计算机开始普及到中国，但这时就面临着一个问题，那就是汉字成千上万，这已经不是ASCII所能表示的范围了。为了解决这个问题，1981年中国国家标准总局发布了GB2312编码标准。它基本能表示99.75%的汉字。但随着各方面的需求，这也不能满足。于是又在GB2312的基础上又创建了GBK编码。它不仅能表示27484个汉字。还可以表示很多少数民族的文字。 #Unicode就这样，全世界各国都发布了自己的标准。在互联网上交流和传输数据就会出现问题。于是为了统一世界的文字编码。统一国际组织提出了Unicode编码。普遍所用的Unicode用4个字节来表示字符，最高位仍保留为0，这完全能囊括世界所有的文字字符，世界上任何一个字符都可以用一个Unicode编码来表示，一旦字符的Unicode编码确定下来后，就不会再改变了。 #UTF-8Unicode的实现方式不同于编码方式。在实际传输与保存时，由于不同的系统平台设计不一定，或者为了节省存储空间，必定用4个字节来保存一个字符太浪费空间了。于是Unicode就有了不同的实现方式，如UTF-16，UTF-8等，当然用的多的就是UTF-8了。 UTF-8（Unicode Transformation Format）作为Unicode的一种实现方式，广泛应用于互联网，它是一种变长的字符编码，可以根据具体情况用1-4个字节来表示一个字符。比如英文字符这些原本就可以用ASCII码表示的字符用UTF-8表示时就只需要一个字节的空间，和ASCII是一样的。对于多字节（n个字节）的字符，第一个字节的前n为都设为1，第n+1位设为0，后面字节的前两位都设为10。剩下的二进制位全部用该字符的unicode码填充。以汉字“好”为例，“好”对应的Unicode是597D，对应的区间是0000 0800–0000 FFFF，因此它用UTF-8表示时需要用3个字节来存储，597D用二进制表示是： 0101100101111101，填充到1110xxxx 10xxxxxx 10xxxxxx得到11100101 10100101 10111101，转换成16进制：e5a5bd，因此“好”的Unicode”597D”对应的UTF-8编码是”E5A5BD” #Python字符编码问题由于Python出的比Uncode早，所以python用的编码就是ASICC，源代码也必须是ASCII，所以在源码中不能有汉字，为了在源码中支持中文，就必须在在源文件开头指定编码格式。 #coding=utf-8或者-- coding: utf-8 __在python中字符串有两种数据类型str和unicode。str类型的字符具体编码和操作系统有关。 python中str与unicode之间的转换也是decode和encode： str–&gt;unicode 用decode方法。unicode–&gt;str 用encode方法。 #参考 https://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;mid=2652564196&amp;idx=2&amp;sn=f12b49f57d22309fe84e6c2518e99de5&amp;pass_ticket=15P%2BhK91bYNpbTZ4iSMRdhysUWU%2BrOfaA0lJ5ydo4%2FfGVjyXErn4ZN70qKCqwPf%2B http://www.liaoxuefengcom/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386819196283586a37629844456ca7e5a7faa9b94ee8000]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[新的开始！]]></title>
      <url>%2F2017%2F02%2F08%2F%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B%EF%BC%81%2F</url>
      <content type="text"><![CDATA[前期总结眨眼间，大三已去一半，回顾大学两年半,基本都在各种论坛闲逛，基本没怎么发言，都是潜水。 或者折腾各种软件，杂七杂八的东西。虽然也学到了不少东西，但是我总觉得缺少了很多东西，在实际操作中总是会遇到很多问题。特别是上学期，我严重发现了自己的不足。也有过一次短期培训，让我稍微清楚了实际项目的流程。 经过自己的总结，我得出以下一些问题。 学的太多太杂，不深入。 自己学得模式有点像猴子搬包谷，看到听到什么就想去学什么。 实际操作太少，基本就是看了一些文章。 自己也有点太过自(zi)信(da)，总认为已经够了。 后期展望大三上期就像一个过渡期，让我看到了以前得不足，让我明白了很多东西。也让我对未来有了一定得规划,准备。争取在大学接下来的日子尽量充实自己，找一个好的工作，在计算机这条道路上走的更远。 确定未来方向，主要专研java，python方面，当然这里面也包括了很多东西，尽量都深入一下。 多找一些实际项目来做，尽量多操作，多实践，弥补这方面的不足。 最后最后说一下本博客得开通吧！首先感谢一下hexo和github以及next，让我们写博客更方便，快捷，开源大法好。 由于一个新的开始嘛，我就想着现在开始写博客。一来提高自己得写作以及表达能力；二来总结一下自己所学的知识，所谓好记性不如烂笔头嘛；三来和各位分享一下自己的心得，当然能得到大家的评鉴就更好了，一起提高嘛！！。 开始起航吧,加油！！！！]]></content>
    </entry>

    
  
  
</search>
